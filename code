import numpy as np
from typing import Tuple, Union, Optional
from dataclasses import dataclass
import warnings

@dataclass
class TimeDelayResult:
    """Structured result for time delay calculations."""
    value: float      # Time delay (s)
    error: float      # Uncertainty (s)
    regime: str       # 'weak' or 'strong'
    mu: float         # Curvature parameter
    lambda_: float    # Time scaling factor (s)

class SinhDelayCalculator:
    """
    Computes sinh-based gravitational time delay for arbitrary lensing systems.
    
    Implements the model from "Hyperbolic Sine Corrections to Gravitational Time Delays"
    (Anando, 2025). Supports scaling laws, error propagation, and non-spherical lenses.
    
    Attributes:
        G (float): Gravitational constant (m^3 kg^-1 s^-2).
        c (float): Speed of light (m/s).
        M_0 (float): Reference mass (kg).
        mu_0 (float): Reference curvature scalar.
        lambda_0 (float): Reference time scaling factor (s).
    """
    
    def __init__(self, mu_0: float = 1e-10, lambda_0: float = 5.866e4, M_0: float = 2e41):
        """Initialize with reference parameters from HE 0435-1223."""
        self.G = 6.674e-11  # m^3 kg^-1 s^-2
        self.c = 3e8        # m/s
        self.M_0 = M_0      # Reference mass (kg)
        self.mu_0 = mu_0    # Reference curvature scalar
        self.lambda_0 = lambda_0  # Reference time scaling factor (s)
        self.MAX_MASS = 2e45  # Max mass (kg) ~ 10^15 M_sun for numerical stability
    
    def validate_inputs(self, M: Union[float, np.ndarray], L1: Union[float, np.ndarray],
                       L2: Union[float, np.ndarray], epsilon: Union[float, np.ndarray]) -> None:
        """Validate input parameters."""
        if np.any(M <= 0):
            raise ValueError("Lens mass M must be positive.")
        if np.any(L1 <= 0) or np.any(L2 <= 0):
            raise ValueError("Path lengths L1, L2 must be positive.")
        if np.any(epsilon < 0):
            raise ValueError("Ellipticity factor epsilon must be non-negative.")
        if np.any(M > self.MAX_MASS):
            warnings.warn("Mass exceeds 10^15 M_sun; using strong-field approximation.")

    def compute_time_delay(self, M: float, L1: float, L2: float, epsilon: float = 0.0,
                          delta_M_rel: float = 0.1, delta_L_rel: float = 0.05) -> TimeDelayResult:
        """
        Compute sinh-based time delay and uncertainty.
        
        Args:
            M (float): Lens mass (kg).
            L1 (float): Path length 1 (m).
            L2 (float): Path length 2 (m).
            epsilon (float): Ellipticity correction for non-spherical lenses (e.g., 0.2 for Abell 1689, 0.3 for Bullet Cluster).
            delta_M_rel (float): Relative uncertainty in mass (default: 0.1).
            delta_L_rel (float): Relative uncertainty in path lengths (default: 0.05).
        
        Returns:
            TimeDelayResult: Structured result with time delay, uncertainty, regime, mu, and lambda.
        
        Raises:
            ValueError: If inputs are invalid.
            RuntimeWarning: If numerical instability is detected.
        
        Example:
            >>> calc = SinhDelayCalculator()
            >>> calc.compute_time_delay(M=2e41, L1=1.892e20, L2=2.176e9)
            TimeDelayResult(value=1477000.0, error=251090.0, regime='strong', mu=1e-10, lambda_=58660.0)
        """
        self.validate_inputs(M, L1, L2, epsilon)
        
        # Schwarzschild radius
        r_s = 2 * self.G * M / self.c**2
        
        # Curvature parameters
        K = L1 / (2 * r_s)
        K_prime = L2 / (2 * r_s)
        K_0 = self.c**2 / (2 * self.G * self.M_0)
        
        # Scaling laws
        mu = self.mu_0 * self.M_0 / M
        lambda_ = self.lambda_0 * (M / self.M_0) * (1 + epsilon)
        
        # Check regime
        arg1 = mu * K / K_0
        arg2 = mu * K_prime / K_0
        regime = "weak" if max(arg1, arg2) < 1 else "strong"
        
        # Handle numerical instability
        if M > self.MAX_MASS:
            delta_t = lambda_ * mu * (K - K_prime) / K_0  # Strong-field approximation
        else:
            if abs(arg2) < 1e-10:
                raise RuntimeWarning("Argument for sinh(K_prime) too small; risk of numerical instability.")
            sinh_ratio = np.sinh(arg1) / np.sinh(arg2)
            if sinh_ratio <= 0:
                raise RuntimeWarning("Invalid sinh ratio; check input parameters.")
            delta_t = lambda_ * np.log(sinh_ratio)
        
        # Uncertainty propagation
        delta_t_rel = np.sqrt(delta_M_rel**2 + 2 * delta_L_rel**2 + delta_M_rel**2)
        delta_t_err = delta_t * delta_t_rel
        
        return TimeDelayResult(value=delta_t, error=delta_t_err, regime=regime, mu=mu, lambda_=lambda_)

    def compute_time_delays(self, M_arr: np.ndarray, L1_arr: np.ndarray, L2_arr: np.ndarray,
                           epsilon_arr: Union[float, np.ndarray] = 0.0,
                           delta_M_rel: float = 0.1, delta_L_rel: float = 0.05) -> np.ndarray:
        """
        Vectorized computation of time delays for multiple lenses.
        
        Args:
            M_arr (np.ndarray): Array of lens masses (kg).
            L1_arr (np.ndarray): Array of path lengths 1 (m).
            L2_arr (np.ndarray): Array of path lengths 2 (m).
            epsilon_arr (Union[float, np.ndarray]): Ellipticity corrections (default: 0.0).
            delta_M_rel (float): Relative uncertainty in mass (default: 0.1).
            delta_L_rel (float): Relative uncertainty in path lengths (default: 0.05).
        
        Returns:
            np.ndarray: Array of TimeDelayResult objects.
        """
        self.validate_inputs(M_arr, L1_arr, L2_arr, epsilon_arr)
        vectorized_func = np.vectorize(
            lambda m, l1, l2, eps: self.compute_time_delay(m, l1, l2, eps, delta_M_rel, delta_L_rel),
            otypes=[object]
        )
        return vectorized_func(M_arr, L1_arr, L2_arr, epsilon_arr)

def main():
    """Run example calculations for validation."""
    calc = SinhDelayCalculator()
    
    # Test case 1: HE 0435-1223
    try:
        result = calc.compute_time_delay(M=2e41, L1=1.892e20, L2=2.176e9)
        print(f"HE 0435-1223: Delta t = {result.value:.2e} ± {result.error:.2e} s, "
              f"Regime: {result.regime}, mu: {result.mu:.2e}, lambda: {result.lambda_:.2e}")
    except (ValueError, RuntimeWarning) as e:
        print(f"Error in HE 0435-1223: {e}")
    
    # Test case 2: SDSS J1004+4112
    try:
        result = calc.compute_time_delay(M=2e42, L1=1.892e20, L2=2.176e9)
        print(f"SDSS J1004+4112: Delta t = {result.value:.2e} ± {result.error:.2e} s, "
              f"Regime: {result.regime}, mu: {result.mu:.2e}, lambda: {result.lambda_:.2e}")
    except (ValueError, RuntimeWarning) as e:
        print(f"Error in SDSS J1004+4112: {e}")
    
    # Test case 3: Abell 1689 (non-spherical)
    try:
        result = calc.compute_time_delay(M=1e44, L1=1.892e20, L2=2.176e9, epsilon=0.2)
        print(f"Abell 1689: Delta t = {result.value:.2e} ± {result.error:.2e} s, "
              f"Regime: {result.regime}, mu: {result.mu:.2e}, lambda: {result.lambda_:.2e}")
    except (ValueError, RuntimeWarning) as e:
        print(f"Error in Abell 1689: {e}")
    
    # Test case 4: Vectorized batch processing
    M_arr = np.array([2e41, 2e42, 1e44])
    L1_arr = np.array([1.892e20, 1.892e20, 1.892e20])
    L2_arr = np.array([2.176e9, 2.176e9, 2.176e9])
    epsilon_arr = np.array([0.0, 0.0, 0.2])
    results = calc.compute_time_delays(M_arr, L1_arr, L2_arr, epsilon_arr)
    print("\nBatch processing results:")
    for i, res in enumerate(results):
        print(f"Lens {i+1}: Delta t = {res.value:.2e} ± {res.error:.2e} s, Regime: {res.regime}")

if __name__ == "__main__":
    main()

# Unit tests (run with pytest)
def test_sinh_delay():
    calc = SinhDelayCalculator()
    
    # Test 1: HE 0435-1223 consistency
    result = calc.compute_time_delay(M=2e41, L1=1.892e20, L2=2.176e9)
    assert abs(result.value - 1.477e6) < 1e3, "HE 0435-1223 time delay mismatch"
    assert abs(result.error - 2.51e5) < 1e3, "HE 0435-1223 uncertainty mismatch"
    
    # Test 2: GR limit (mu -> 0)
    calc_small_mu = SinhDelayCalculator(mu_0=1e-20)
    result = calc_small_mu.compute_time_delay(M=2e41, L1=1.892e20, L2=2.176e9)
    expected = calc_small_mu.lambda_0 * np.log(1.892e20 / 2.176e9)
    assert abs(result.value - expected) < 1e-2, "GR limit failure"
    
    # Test 3: Invalid inputs
    try:
        calc.compute_time_delay(M=-1e41, L1=1.892e20, L2=2.176e9)
        assert False, "Negative mass not caught"
    except ValueError:
        pass
    
    # Test 4: Large mass
    result = calc.compute_time_delay(M=3e45, L1=1.892e20, L2=2.176e9)
    assert result.regime == "strong", "Large mass not in strong regime"
